user nginx;
worker_processes auto;
pid /var/run/nginx.pid;
error_log  /var/log/nginx.error_log  debug;

events {
    worker_connections 2048;
}

http {
    include       /etc/nginx/mime.types;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent"';

    client_header_timeout  1m;
    client_body_timeout    1m;
    send_timeout           1m;

    client_header_buffer_size    1k;
    large_client_header_buffers  4 4k;

    gzip on;
    gzip_min_length  2000;
    gzip_buffers     4 8k;
    gzip_types       text/plain;

    output_buffers   1 32k;
    postpone_output  1460;

    sendfile         on;
    tcp_nopush       on;
    tcp_nodelay      on;
    #send_lowat       12000;

    keepalive_timeout  75 20;

    lingering_time     30;
    lingering_timeout  10;
    reset_timedout_connection  on;

    upstream auth.jacoblounge {
        server auth.jacoblounge:80;  # Internal service runs on HTTP
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name auth.jacoblounge.pt;

        return 301 https://$host$request_uri;
    }

    # HTTPS entrypoint (NGINX handles TLS)
    server {
        listen 443 ssl;
        server_name auth.jacoblounge.pt;

        ssl_certificate     /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        ssl_session_timeout 1h;
        ssl_session_tickets off;

        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_ciphers         HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        ssl_session_cache   shared:SSL:10m;

        port_in_redirect on;

        location /login {
            if ($request_method = OPTIONS ) {
                add_header 'Access-Control-Allow-Origin' 'https://frontend.jacoblounge.pt';
                add_header 'Access-Control-Allow-Methods' 'POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Content-Type';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                return 204;
            }
            proxy_pass http://auth.jacoblounge/login;  # Your login app

            include /etc/nginx/proxy_common.conf;

            add_header 'Access-Control-Allow-Origin' 'https://frontend.jacoblounge.pt' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
        }

        location /validate {
            internal;
            proxy_pass http://auth.jacoblounge/validate;  # e.g., returns 200 if JWT is valid, else 401
            proxy_set_header Cookie $http_cookie;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;

            include /etc/nginx/proxy_common.conf;
        }
        location / {
            proxy_pass http://auth.jacoblounge;  # backend still uses HTTP
            include /etc/nginx/proxy_common.conf;
        }
    }

    upstream frontend.jacoblounge {
        server frontend.jacoblounge:80;  # Internal service runs on HTTP
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name frontend.jacoblounge.pt;

        return 301 https://$host$request_uri;
    }

    # HTTPS entrypoint (NGINX handles TLS)
    server {
        listen 443 ssl;
        server_name frontend.jacoblounge.pt;

        ssl_certificate     /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        ssl_session_timeout 1h;
        ssl_session_tickets off;

        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_ciphers         HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        ssl_session_cache   shared:SSL:10m;

        port_in_redirect on;

        location ~* login {
            include /etc/nginx/proxy_common.conf;
            proxy_pass http://frontend.jacoblounge;
        }

        location @redirect_to_login {
            return 302 /login;
        }

        location / {
            include /etc/nginx/proxy_common.conf;

            auth_request /validate;
            error_page 401 = @redirect_to_login;

            proxy_pass http://frontend.jacoblounge;  # backend still uses HTTP
        }

        location /validate {
            include /etc/nginx/proxy_common.conf;

            proxy_pass http://auth.jacoblounge/validate;  # backend still uses HTTP
        }

    }

    include /etc/nginx/conf.d/*.conf;

}
